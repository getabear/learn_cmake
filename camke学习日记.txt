总体： 变量名需要使用 ${} 来取得变量的值， 比如${SRC} 就是取得SRC变量的值

1. set命令： set命令可以指定变量，变量的值都是 字符串。 
	格式  	set(变量名 变量值)
	举例 		set(SRC a.c b.c d.c) 这样SRC的值就为 a.c b.c d.c。

2. 一个重要的路径变量：CMAKE_CURRENT_SOURCE_DIR， 这个变量能够得到当前的CMakeLists.txt的位置

3. file命令， 这里只介绍file文件搜索功能。
	格式 	file(GLOB 变量名 路径通配符)   搜索路径下对应的文件， 不包含子目录
		file(GLOB_RECURSE 变量名 路径通配符)  包含子目录
	举例 file(GLOB SRC ./*.cpp)  获取当前路径下的所有cpp文件，并将其保存到变量SRC中

4. include_directories命令，添加对应的头文件路径。
	格式 include_directories(路径)
	举例 include_directories(./include) 将当前目录下的include目录添加到头文件的搜索路径

5. add_executable命令，生成可执行程序。
	格式 add_executable(可执行名称 源文件)
	举例 add_executable(app ${SRC}) 生成一个叫app的可执行文件，他使用的源文件是变量SRC中存储的（可以指定多个）

6. add_library命令，用于生成库文件（静态库和动态库）
	格式 add_library(库文件名称 [STATIC | SHARED] 源文件)
	举例 add_library(calc STATIC ${SRC}) 根据源文件，生成一个名为calc的静态库
	       add_library(calc SHARED ${SRC}) 根据源文件，生成一个名为calc的动态库

7.link_libraries命令，用于链接阶段库文件的链接。
	格式 link_libraries(库文件名)
	举例 link_libraries(calc nihao) 链接的时候需要将calc库文件和nihao的库文件链接进来（如果这两个库文件不在系统的搜索路径下，后面还需要使用link_directories将库文件的路径添加进来）

8. link_directories命令， 添加库文件的搜索路径
	格式 link_directories(路径)
	举例 link_directories(${CAMKE_CURRENT_SOURCE_DIR}/lib1 ${CAMKE_CURRENT_SOURCE_DIR}/lib2) 将lib1和lib2两个路径添加到库文件搜索路径

9.target_link_libraries命令， 对目标文件链接库文件
	格式 target_link_libraries(目标  库文件) 
	举例 target_link_libraries(app calc ...) 假设app是一个可执行文件，这个的含义就是对app链接库文件calc，以及其他库文件 ...

10. message命令，相当于打印函数
	格式 message(消息类型 消息)
		消息类型有6种：
			1. 无 = 重要消息，也就是消息类型不传递的时候，比如 message(hello), 就会打印出hello
			2. status = 非重要消息
			3. warning = CMake的警告，会继续执行
			4. author_warning = 警告，会继续执行
			5. send_error = cmake错误， 会继续执行，但是会跳过生成步骤
			6. fatal_error = cmake错误， 会终止所有处理过程
	举例 message(status ${SRC}), 该命令会以非重要消息的方式输出SRC变量的值

11. set命令，除了用于设置变量的值， 该命令还可以用于进行字符串的拼接
	格式： set(tmp ${tmp1} $ {tmp2} ...)
	举例： set(tmp ${tmp1} $ {tmp2}）将变量tmp1和tmp2拼接后的值保存到tmp变量之中

12. list命令， 用于字符串的拼接和删除。
	格式：list(APPEND 变量名 其他字符串 ...) ， 功能就是将其他字符串的值拼接在一起，并将其保存到变量中
	          list(REMOVE_ITEM 变量名 字符串)， 功能就是将字符串从变量中删除
	举例： list(APPEND tmp HELLO ${SRC}) : 将字符串HELLO和变量SRC中保存的值拼接在一起保存到tmp中
		list(REMOVE_ITEM tmp HELLO) : 将HELLO从变量tmp中移除。

13. 宏定义！！！可以使用CMake定义宏，比如下面的程序，可以不在对应的源文件中定义DEBUG宏，转而去CMake中定义宏
	int main(){
		int a =10;
	#ifdef DEBUG
		printf("DEBUG\n");
	#endif
		for(int i = 0; i < 10; i++){
			printf("hello cmake\n");
		}
		return 0;
	}
	格式 add_definitions(-D宏 ...)
	举例 add_difinitions(-DDEBUG), 定义了一个名为DEBUG的宏，这样上面的程序printf("DEBUG")得以执行。

14. 嵌套CMake，在大型项目下，可以在每个文件夹中编写对应的CMakeLists.txt，这样方便项目的管理。
	其中，最顶层中CMake定义的变量，子CMake也可以使用，相当于顶层的CMake是全局变量。子CMake中的是局部变量。
	格式： add_subdirectory(路径)
	举例： add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/calc)

15.  .cmake文件的作用： 帮助CMakeLists.txt进行复用，具体可以参看链接： https://blog.csdn.net/qq_38410730/article/details/102677143

